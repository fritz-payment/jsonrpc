{"name":"Jsonrpc","tagline":"A general JSON RPC client.","body":"jsonrpc\r\n=======\r\n\r\nA general JSON RPC client implementation for PHP.\r\n\r\n* Support for different transports (currently a cURL implementation exists).\r\n* Different JSON RPC Codecs (currently JSON RPC Version 1.0 as defined by http://json-rpc.org/wiki/specification is implemented; JSON RPC 2.0 http://www.jsonrpc.org/specification will be supported soon).\r\n* Clean API.\r\n\r\n# Project Wiki\r\n\r\n[GitHub Project Wiki](https://github.com/fritz-payment/jsonrpc/wiki)\r\n\r\n# What's new\r\n\r\n## Version 0.1.0\r\n\r\n* Finished basic implementations.\r\n\r\nWe will start working on the JSON RPC 2.0 Codec now.\r\n\r\n# Getting started\r\n\r\n## Installation\r\n\r\nYou can use Composer (http://www.getcomposer.org) to install the JSON RPC library.\r\n\r\n    {\r\n        \"require\": {\r\n            \"fritz-payment/jsonrpc\": \"dev-master\"\r\n        }\r\n    }\r\n\r\n## Usage\r\n\r\nThis example calls a JSON RPC 1.0 method \"test.echo\" on the URL http://www.example.com using cURL.\r\n\r\n    <?php\r\n    use \\FritzPayment\\JsonRpc\\Rpc\\Codec\\JsonRpc10;\r\n    use \\FritzPayment\\JsonRpc\\Client\\Transport\\Curl;\r\n\r\n    // initialize JSON RPC 1.0 Codec\r\n    $codec = new JsonRpc10();\r\n    // initialize cURL transport\r\n    $transport = new Curl();\r\n\r\n    // initialize client\r\n    $client = new \\FritzPayment\\JsonRpc\\Client('http://www.example.com', $codec, $transport);\r\n\r\n    // create a new request\r\n    /* @var $request \\FritzPayment\\JsonRpc\\Rpc\\Codec\\JsonRpc10\\Request */\r\n    $request = $client->newRequest();\r\n    $request->setMethod('test.echo')\r\n        ->setId('1');\r\n    $request->setParams(array('test message'));\r\n\r\n    // send request\r\n    $response = $client->exec($request);\r\n    if ($response === false) {\r\n        // failed\r\n    } else {\r\n        if ($response->isError()) {\r\n            // JSON RPC error\r\n            echo $response->getError()->error();\r\n        } else {\r\n            var_dump($response->getResult());\r\n        }\r\n    }\r\n\r\n## Extending the library\r\n\r\nIt is possible to create your own implementations of Transports and Codecs.\r\n\r\nThe abstract Transport and Codec classes and the existing implementations should give you an idea of how to do that.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}